<b:beans xmlns="http://www.springframework.org/schema/security"
 xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/security 
    http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <http pattern="/ext/**" security="none" />
	<http pattern="/css/**" security="none" />
	<http pattern="/image/**" security="none" />
	<!-- <http pattern="/html/**" security="none" /> -->
	<http pattern="/login.html" security="none"/>
	<http pattern="/rs/user/register" security="none"/>
	
	<http auto-config="true" access-denied-page="/login.html">
	
		<!-- 下面是对Action配置。表示具有访问/unitsManager资源的用户必须具有ROLE_PLATFORMADMIN的权限。
	                     当用户登录时，SS3将用户的所有权限从数据库中提取出来，形成列表。 当用户访问该资源时，SS3将
	                     登录用户的权限列表提出来跟下面配置的权限进行比对，若有，则允许访问，若没有，则给出AccessDeniedException。-->
		<!-- <intercept-url pattern="/usersManager"  access="ROLE_PLATFORMADMIN" />
		<intercept-url pattern="/**"   access="ROLE_USER" /> -->
		<anonymous enabled="true"/>
		<form-login login-page="/login.html" authentication-failure-url="/login.html?error=true"
	 		username-parameter="account" password-parameter="passwd"  
	 		default-target-url="/html/intro.html" login-processing-url="/rs/user/login"/>
		<logout invalidate-session="true"
			logout-success-url="/login.html"
			logout-url="/rs/user/logout"/>
		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） -->
		<!-- <remember-me data-source-ref="dataSource" /> -->
		<!-- 检测失效的sessionId,超时时定位到另外一个URL -->
		<session-management invalid-session-url="/sessionTimeout.jsp" />
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="secFilter"/>
	</http>
	
	<!-- 注意能够为authentication-manager 设置alias别名  -->
	<authentication-manager alias="authenticationManager">
	     <authentication-provider ref="daoAuthenticationProvider">
	          <!-- <password-encoder ref="passwordEncoder">
	               用户名做为盐值
	               <salt-source user-property="account" />
	          </password-encoder> -->
	     </authentication-provider>
	</authentication-manager>
	<!-- <b:bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<b:property name="authenticationProvider" ref="daoAuthenticationProvider"></b:property>
	</b:bean> -->
	
	<b:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<b:property name="userDetailsService" ref="myUserDetailService"></b:property>
		<b:property name="passwordEncoder" ref="passwordEncoder"></b:property>
		<b:property name="saltSource">
			<b:bean class="org.springframework.security.authentication.dao.ReflectionSaltSource">
				<b:property name="userPropertyToUse" value="username"></b:property>
			</b:bean>
		</b:property>
	</b:bean>
	<!-- 用户的密码加密或解密 -->
	<b:bean id="passwordEncoder"
	 class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	
	
	<b:bean id="secFilter" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<b:property name="authenticationManager" ref="authenticationManager"></b:property>
		<b:property name="accessDecisionManager" ref="myAccessDecisionManager"></b:property>
		<b:property name="securityMetadataSource" ref="myInvocationSecurityMetadataSourceService"></b:property>
	</b:bean>
	
	<!-- 用户详细信息管理 : 数据源、用户缓存、启用用户组功能。 
	<b:bean id="userDetailsManager"
	 class="org.springframework.security.provisioning.JdbcUserDetailsManager">
	 <b:property name="dataSource" ref="parkDataSource" />
	 <b:property name="userCache" ref="userCache" />
	 <b:property name="enableGroups" value="false"/>  
	 <b:property name="enableAuthorities" value="false"/>  
	 <b:property name="usersByUsernameQuery">
	   <b:value>SELECT account, passwd,
	          status FROM users WHERE account=? 
	   </b:value>
	 </b:property>
	</b:bean> -->
	
	<b:bean id="userCache"
	 class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
		<b:property name="cache" ref="userEhCache" />
	</b:bean> 
	
	
	<b:bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<b:property name="cacheName" value="userCache" />
		<b:property name="cacheManager" ref="cacheManager" />
	</b:bean>
	
	<!-- 缓存用户管理 -->
	<b:bean id="cacheManager"
	 class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
	 
	
	<!-- spring security自带的与权限有关的数据读写Jdbc模板 -->
	<b:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<b:property name="dataSource" ref="parkDataSource" />
	</b:bean>
 
</b:beans>